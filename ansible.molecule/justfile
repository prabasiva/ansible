# Ansible Molecule Development Environment Justfile
# Provides convenient commands for common tasks using 'just' command runner
# Install just: https://github.com/casey/just

# Show available commands (default)
help:
    @echo "Ansible Molecule Development Environment"
    @echo "======================================"
    @echo "Available commands:"
    @just --list --unsorted

# Setup and Installation

# Set up the development environment
setup:
    @echo "Setting up Ansible Molecule environment..."
    python3 -m venv ansible-molecule-env
    . ansible-molecule-env/bin/activate && \
        pip install --upgrade pip && \
        pip install ansible molecule[docker] molecule-plugins[docker] pytest-testinfra docker requests
    . ansible-molecule-env/bin/activate && \
        ansible-galaxy install -r collections/requirements.yml
    @echo "Setup complete! Run 'source ansible-molecule-env/bin/activate' to activate environment"

# Check if all dependencies are installed
check-deps:
    @echo "Checking dependencies..."
    @command -v docker >/dev/null 2>&1 || { echo "Docker not installed"; exit 1; }
    @command -v python3 >/dev/null 2>&1 || { echo "Python3 not installed"; exit 1; }
    @if [ ! -d "ansible-molecule-env" ]; then echo "Virtual environment not found. Run 'just setup'"; exit 1; fi
    @. ansible-molecule-env/bin/activate && command -v molecule >/dev/null 2>&1 || { echo "Molecule not installed"; exit 1; }
    @echo "All dependencies are installed"

# Check if Docker (via Colima) is running and accessible
check-docker:
    @echo "Checking Docker/Colima status..."
    @if ! command -v colima >/dev/null 2>&1; then \
        echo "Colima is not installed"; \
        echo "   Installing Colima and Docker..."; \
        brew install colima docker; \
    fi
    @if ! colima status | grep -q "Running" 2>/dev/null; then \
        echo "Colima is not running"; \
        echo "   Starting Colima with 4 CPU and 8GB memory..."; \
        colima start --cpu 4 --memory 8; \
    else \
        echo "Colima is running"; \
    fi
    @if ! docker info >/dev/null 2>&1; then \
        echo "Cannot connect to Docker daemon"; \
        echo "   Please ensure Colima is fully started and try again"; \
        exit 1; \
    else \
        echo "Docker daemon is accessible"; \
    fi
    @if docker run --rm hello-world >/dev/null 2>&1; then \
        echo "Docker is working correctly"; \
    else \
        echo "Docker test failed"; \
        exit 1; \
    fi
    @echo "Docker with Colima is ready for Molecule testing!"

# Testing targets

# Run default Molecule test
test: check-deps check-docker
    @echo "Running default Molecule test..."
    . ansible-molecule-env/bin/activate && molecule test

# Run multi-host scenario test
test-multi: check-deps check-docker
    @echo "Running multi-host scenario test..."
    . ansible-molecule-env/bin/activate && molecule test -s multi-host

# Run failure scenarios test
test-failure: check-deps check-docker
    @echo "Running failure scenarios test..."
    . ansible-molecule-env/bin/activate && molecule test -s failure-scenarios

# Run all test scenarios
test-all: test test-multi test-failure
    @echo "All tests completed!"

# Individual role testing

# Test HAProxy role
test-haproxy: check-deps
    @echo "Testing HAProxy role..."
    cd roles/haproxy && ../../ansible-molecule-env/bin/molecule test

# Test Envoy Proxy role
test-envoy: check-deps
    @echo "Testing Envoy Proxy role..."
    cd roles/envoyproxy && ../../ansible-molecule-env/bin/molecule test

# Test Common infrastructure role
test-common: check-deps
    @echo "Testing Common infrastructure role..."
    cd roles/common && ../../ansible-molecule-env/bin/molecule test

# Happy path and integration testing

# Run happy path tests
test-happy: check-deps
    @echo "Running happy path tests..."
    . ansible-molecule-env/bin/activate && \
        ansible-playbook playbooks/test-happy-path.yml -i inventory/hosts.yml

# Run full integration tests
test-integration: check-deps
    @echo "Running integration tests..."
    . ansible-molecule-env/bin/activate && \
        molecule create -s multi-host && \
        molecule converge -s multi-host && \
        ansible-playbook playbooks/test-happy-path.yml -i molecule/multi-host/inventory/hosts.yml && \
        molecule verify -s multi-host && \
        molecule destroy -s multi-host
    @echo "Integration tests completed!"

# Development and debugging

# Run multi-host scenario with debug output
debug: check-deps check-docker
    @echo "Running multi-host scenario in debug mode..."
    . ansible-molecule-env/bin/activate && molecule --debug test -s multi-host

# Run converge step only (deploy without testing)
converge: check-deps check-docker
    @echo "Running converge step..."
    . ansible-molecule-env/bin/activate && molecule converge -s multi-host

# Run verify step only (test existing deployment)
verify: check-deps
    @echo "Running verify step..."
    . ansible-molecule-env/bin/activate && molecule verify -s multi-host

# Login to the first container for debugging
login: check-deps
    @echo "Logging into container for debugging..."
    . ansible-molecule-env/bin/activate && molecule login -s multi-host

# Destroy test infrastructure
destroy: check-deps
    @echo "Destroying test infrastructure..."
    . ansible-molecule-env/bin/activate && molecule destroy -s multi-host

# Linting and validation

# Run Ansible linting
lint: check-deps
    @echo "Running Ansible lint..."
    . ansible-molecule-env/bin/activate && ansible-lint roles/ playbooks/

# Check Ansible syntax
syntax: check-deps
    @echo "Checking Ansible syntax..."
    . ansible-molecule-env/bin/activate && \
        ansible-playbook --syntax-check playbooks/site.yml -i inventory/hosts.yml && \
        ansible-playbook --syntax-check playbooks/development.yml -i inventory/hosts.yml && \
        ansible-playbook --syntax-check playbooks/production.yml -i inventory/hosts.yml

# Run all validation checks
validate: lint syntax
    @echo "All validation checks passed!"

# Environment management

# Clean up Docker containers and images
clean:
    @echo "Cleaning up Docker resources..."
    -docker stop $(docker ps -aq)
    -docker rm $(docker ps -aq)
    -docker rmi $(docker images -q --filter "dangling=true")
    -docker system prune -f

# Clean up everything including virtual environment
clean-all: clean
    @echo "Cleaning up virtual environment..."
    rm -rf ansible-molecule-env
    @echo "Cleanup complete!"

# Utility targets

# Show logs from running containers
logs: check-deps
    @echo "Showing container logs..."
    . ansible-molecule-env/bin/activate && molecule logs -s multi-host

# Show status of Molecule scenarios
status: check-deps
    @echo "Molecule scenarios status:"
    . ansible-molecule-env/bin/activate && molecule list

# Show running Docker containers
ps:
    @echo "Running containers:"
    docker ps

# Show Docker images
images:
    @echo "Docker images:"
    docker images

# Quick development workflow

# Quick start for development (converge only)
dev-start: converge
    @echo "Development environment is ready!"
    @echo "Access points:"
    @echo "  - HAProxy stats: http://localhost:8080/stats (admin/admin123)"
    @echo "  - Envoy admin: http://localhost:9901/"
    @echo "Run 'just login' to debug containers"

# Quick test of current deployment
dev-test: verify
    @echo "Testing current deployment..."

# Stop development environment
dev-stop: destroy
    @echo "Development environment stopped"

# CI/CD helpers

# Run CI-friendly tests (non-interactive)
ci-test: check-deps
    @echo "Running CI tests..."
    . ansible-molecule-env/bin/activate && \
        molecule test --all

# Prepare environment for CI
ci-prepare:
    @echo "Preparing CI environment..."
    docker info
    python3 --version
    pip install --upgrade pip
    pip install ansible molecule[docker] molecule-plugins[docker] pytest-testinfra

# Documentation

# Open documentation
docs:
    @echo "Opening documentation..."
    @if command -v open >/dev/null 2>&1; then \
        open README.md; \
    elif command -v xdg-open >/dev/null 2>&1; then \
        xdg-open README.md; \
    else \
        echo "Please open README.md in your preferred editor"; \
    fi

# Installation verification

# Verify installation is working
verify-install: check-deps
    @echo "Verifying installation..."
    . ansible-molecule-env/bin/activate && \
        molecule --version && \
        ansible --version && \
        docker run --rm hello-world
    @echo "Installation verification complete!"

# Update dependencies

# Update all dependencies
update: check-deps
    @echo "Updating dependencies..."
    . ansible-molecule-env/bin/activate && \
        pip install --upgrade ansible molecule[docker] molecule-plugins[docker] pytest-testinfra && \
        ansible-galaxy install -r collections/requirements.yml --force
    @echo "Dependencies updated!"